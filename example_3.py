#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Sep 30, 2021 03:29:59 PM CEST  platform: Windows NT

import sys
import os
import logging 
import queue
from flexABLE.flexABLE import World
import pandas as pd
import threading
import numpy as np
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import supportVariables

global after_id
after_id = None
def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    supportVariables.set_Tk_var()
    top = Toplevel1 (root)
    supportVariables.init(root, top)
    root.protocol("WM_DELETE_WINDOW", destroy_Toplevel1)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    supportVariables.set_Tk_var()
    top = Toplevel1 (w)
    supportVariables.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    if after_id is not None:
        root.after_cancel(after_id) # This is added to canceled all queued actions if script is terminated
    #w.destroy()
    w = None
    root.destroy()
# =============================================================================
# This is a queue handler for the logging messages
# =============================================================================
class QueueHandler(logging.Handler):
    """Class to send logging records to a queue

    It can be used from different threads
    """

    def __init__(self, log_queue):
        super().__init__()
        self.log_queue = log_queue

    def emit(self, record):
        self.log_queue.put(record)
#logger = logging.getLogger(__name__)
logger = logging.getLogger("flexABLE")
class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1018x450+390+312")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(0,  0)
        top.title("flexABLE")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.top = top
        
        self.Button1 = tk.Button(top)
        self.Button1.place(x=600, y=420, height=24, width=107)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=self.startSimulation)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Start''')

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(x=710, y=420, width=290, height=22)
        self.TProgressbar1.configure(length="290")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(x=10, y=10, height=396, width=574)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text="Load Scenario", compound="left"
                ,underline="-1", )
        self.TNotebook1_t1.configure(borderwidth="1")
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        
        self.Listbox1 = tk.Listbox(self.TNotebook1_t1)
        self.Listbox1.place(x=10, y=40, height=322, width=214)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="blue")
        self.Listbox1.configure(selectforeground="white")
        self.Listbox1.insert(1, *list(os.walk("input"))[0][1])

        self.Label1 = tk.Label(self.TNotebook1_t1)
        self.Label1.place(x=10, y=18, height=21, width=54)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Scenarios''')

        self.Button2 = tk.Button(self.TNotebook1_t1)
        self.Button2.place(x=230, y=330, height=24, width=84)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Load scenario''')
        self.Button2.configure(command=self.loadScenario)

        self.Text1 = tk.Text(self.TNotebook1_t1)
        self.Text1.place(x=230, y=40, height=54, width=324)
        self.Text1.configure(background="#d9d9d9")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")

        self.Entry1 = tk.Entry(self.TNotebook1_t1)
        self.Entry1.place(x=320, y=110, height=20, width=184)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="blue")
        self.Entry1.configure(selectforeground="white")
        self.tooltip_font = "TkDefaultFont"
        self.Entry1_tooltip = \
        ToolTip(self.Entry1, self.tooltip_font, '''Date Format (DD.MM.YYYY)''')

        self.Label2 = tk.Label(self.TNotebook1_t1)
        self.Label2.place(x=230, y=110, height=21, width=74)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Starting date''')

        self.Entry2 = tk.Entry(self.TNotebook1_t1)
        self.Entry2.place(x=320, y=140, height=20, width=184)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="blue")
        self.Entry2.configure(selectforeground="white")

        self.Label3 = tk.Label(self.TNotebook1_t1)
        self.Label3.place(x=230, y=140, height=21, width=84)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Number of day''')

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook1_t1)
        self.TLabelframe1.place(x=230, y=170, height=155, width=330)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''Simulation options''')
        self.TLabelframe1.configure(borderwidth="1")

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        
        self.TCheckbutton1 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton1.place(x=10, y=20, width=176, height=21
                , bordermode='ignore')
        self.TCheckbutton1.configure(variable=supportVariables.tch_checkAvailability)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Load powerplants availability''')

        self.TCheckbutton2 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton2.place(x=10, y=40, width=120, height=21
                , bordermode='ignore')
        self.TCheckbutton2.configure(variable=supportVariables.tch_importStorages)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''Load storage units''')

        self.TCheckbutton3 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton3.place(x=10, y=60, width=143, height=21
                , bordermode='ignore')
        self.TCheckbutton3.configure(variable=supportVariables.tch_importCRM)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''Include control reserve''')

        self.TCheckbutton4 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton4.place(x=10, y=80, width=185, height=21
                , bordermode='ignore')
        self.TCheckbutton4.configure(variable=supportVariables.tch_importCBT)
        self.TCheckbutton4.configure(takefocus="")
        self.TCheckbutton4.configure(text='''Include cross border capacities''')

        self.TCheckbutton5 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton5.place(x=10, y=100, width=175, height=21
                , bordermode='ignore')
        self.TCheckbutton5.configure(variable=supportVariables.tch_meritOrder)
        self.TCheckbutton5.configure(takefocus="")
        self.TCheckbutton5.configure(text='''Generate price forward curve''')
        
        self.TCheckbutton6 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton6.place(x=10, y=120, width=205, height=21
                , bordermode='ignore')
        self.TCheckbutton6.configure(variable=supportVariables.tch_importDHM)
        self.TCheckbutton6.configure(takefocus="")
        self.TCheckbutton6.configure(text='''Include District heating market''')

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(x=600, y=50, height=365, width=405)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")
        self.Scrolledtext1.tag_config('INFO', foreground='black')
        self.Scrolledtext1.tag_config('DEBUG', foreground='gray')
        self.Scrolledtext1.tag_config('WARNING', foreground='orange')
        self.Scrolledtext1.tag_config('ERROR', foreground='red')
        self.Scrolledtext1.tag_config('CRITICAL', foreground='red', underline=1)
        # Create a logging handler using a queue
        self.log_queue = queue.Queue()
        self.queue_handler = QueueHandler(self.log_queue)
        logger.addHandler(self.queue_handler)
        # Start polling messages from the queue
        top.after(100, self.poll_log_queue)
        
        # =====================================================================
        # Power plants tab
        # =====================================================================
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3, state="disabled")
        self.TNotebook1.tab(1, text="Power plants", compound="left", underline="-1"
                ,)
        self.TNotebook1_t2.configure(borderwidth="1")
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        # =====================================================================
        # Results Tab
        # =====================================================================
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3, state="disabled")
        self.TNotebook1.tab(2, text="Results", compound="left", underline="-1"
                ,)
        self.TNotebook1_t3.configure(borderwidth="1")
        self.TNotebook1_t3.configure(background="#d9d9d9")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")

        self.button = tk.Button (self.TNotebook1_t3, text="check", command=self.plot)
        self.button.pack()
        
        self.Label4 = tk.Label(top)
        self.Label4.place(x=600, y=27, height=21, width=26)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Log''')
        
        self.flexWorld = None

    def plot (self):
        x=[_ for _ in range(len(self.flexWorld.IEDPrice))]
        y= self.flexWorld.IEDPrice

        fig = Figure(figsize=(5,5))
        a = fig.add_subplot(111)
        a.plot(x, y,color='blue')

        a.set_title ("Estimated market price", fontsize=16)
        a.set_ylabel("Price", fontsize=14)
        a.set_xlabel("Timesteps", fontsize=14)

        canvas = FigureCanvasTkAgg(fig, master=self.TNotebook1_t3)
        canvas.get_tk_widget().pack()
        canvas.draw()

    def loadScenario(self):
        try:
            
            writeResultsToDB = False
            year = int(self.Listbox1.get(self.Listbox1.curselection()[0]))
            days = 1
            
            startingPoint = 0
            snapLength = 96*days    
            timeStamps = pd.date_range('{}-01-01T00:00:00'.format(year), '{}-01-01T00:00:00'.format(year+1), freq = '15T')
        
            self.flexWorld = World(snapLength,
                            simulationID = 'example',
                            startingDate = timeStamps[startingPoint],
                            writeResultsToDB = writeResultsToDB)
            kwargs={"scenario" : '{}'.format(year),
                    "checkAvailability" : bool(supportVariables.tch_checkAvailability.get()),
                    "importStorages" :  bool(supportVariables.tch_importStorages.get()),
                    "importCRM" :  bool(supportVariables.tch_importCRM.get()),
                    "importCBT" :  bool(supportVariables.tch_importCBT.get()),
                    "meritOrder" :  bool(supportVariables.tch_meritOrder.get()),
                    "importDHM" :  bool(supportVariables.tch_importDHM.get())}
            
            thread = threading.Thread(target=self.flexWorld.loadScenario, kwargs=kwargs)
            thread.start()
                
        except IndexError:
            print("No scenario selected!")

    def startSimulation(self):
        thread = threading.Thread(target=self.flexWorld.runSimulation)
        thread.start()

    def display(self, record):
        msg = self.queue_handler.format(record)
        self.Scrolledtext1.configure(state='normal')
        self.Scrolledtext1.insert(tk.END, msg + '\n', record.levelname)
        self.Scrolledtext1.configure(state='disabled')
        # Autoscroll to the bottom
        self.Scrolledtext1.yview(tk.END)

    def poll_log_queue(self):
        global after_id
        # Check every 100ms if there is a new message in the queue to display
        while True:
            try:
                record = self.log_queue.get(block=False)
            except queue.Empty:
                break
            else:
                self.display(record)
        after_id = self.top.after(100, self.poll_log_queue)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
    





